Notes:

To Do: 

1. Pull latest matches for pros and load into individual json files stored in staging - done
2. Pull key data from matches json and load into csv/dataframe - done
3. build dimensional model based on matches fact table, and player/team dimensions
        currently building match fact using a join to players.csv, need to build dataframe of players.csv and make the account_id the key column, 
        can then join from the match dataframe to the player dataframe on account_id - done
        need to add account_id as a column in matches file. - done 
4. Build team dimension, decide how team dimension will work and where it will sit. It's probably a heirarchical dimension containing org>team>player
5. join it up and have fun :D :D :D

6. Trying to build the Type 2 dimension effective_from and _to date stuff. Currently trying to merge the old and new data then use the 
        data from the new to update the old and set the effective_from_dates. 

Issues:

Dataframe example:

df1
        match_id        account_id
0       1               dfg
1       2               cba
2       3               abc

df2
        dim_player_id   account_id
0       1               dfg
1       2               abc
2       3               cba


Old code: 

        # for item in data:
        #     if not (item['account_id'] is None):
        #         account_id = str(item['account_id'])
        #     else:
        #         account_id = ''    
        #     if not (item['last_match_time'] is None):
        #         last_match_time_str = str(item['last_match_time'])
        #     else:
        #         last_match_time_str = ''    
    
        #     #print(type(item['last_match_time']))
        #     if not (item['last_match_time'] is None and type(last_match_time_str != None)):
        #         last_match_time = parser.parse(last_match_time_str)
        #         current_date = datetime.now(last_match_time.tzinfo)                        
                
        #         # calculate date difference between last match and now, if less than 5 hours ago, build the api url
        #         date_difference = current_date - last_match_time
        #         if (date_difference < timedelta(hours=5)):# and player_name == 'SaberLight':
        #             recent_matches_url = self.base_url + 'players/' + str(account_id) + '/recentMatches/'          
        #             print(str(i) + ' - Player: ' + str(account_id) + ' last played on :' + last_match_time_str )         
        #             i +=1    
                
                
        #             self.matches = requests.get(recent_matches_url).json()

        #             with open(self.data_folder + self.output_file + account_id + '.json', "w") as f:
        #                 json.dump(self.matches, f, ensure_ascii=False, indent=4)
                    
        #         time.sleep(1)